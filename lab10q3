#include <stdio.h>
#include <cuda_runtime.h>

#define N 8  // Array size (must be power of 2 for this simple version)

__global__ void inclusive_scan_kernel(int *data) {
    int tid = threadIdx.x;

    // temp array in shared memory
    __shared__ int temp[N];

    temp[tid] = data[tid];
    __syncthreads();

    for (int stride = 1; stride < N; stride *= 2) {
        int val = 0;
        if (tid >= stride)
            val = temp[tid - stride];
        __syncthreads();
        temp[tid] += val;
        __syncthreads();
    }

    data[tid] = temp[tid];
}

int main() {
    int h_data[N] = {3, 1, 7, 0, 4, 1, 6, 3};
    int *d_data;

    cudaMalloc((void**)&d_data, N * sizeof(int));
    cudaMemcpy(d_data, h_data, N * sizeof(int), cudaMemcpyHostToDevice);

    inclusive_scan_kernel<<<1, N>>>(d_data);

    cudaMemcpy(h_data, d_data, N * sizeof(int), cudaMemcpyDeviceToHost);

    printf("\nInclusive Scan Output:\n");
    for (int i = 0; i < N; i++) {
        printf("%d ", h_data[i]);
    }
    printf("\n");

    cudaFree(d_data);
    return 0;
}
